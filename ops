{"author":{"id":"1f074489d945895bb210302fbff995dc666b223b4510531901cee946767163c9"},"ops":[{"type":6,"timestamp":1583766126,"nonce":"VesDrWfT1C7C8W0iMy788xc3/KI=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDozNTgzMjk4MTM="},"target":"a73472d60c0f789f040792ba2f347ed42bfddf4085115668dae5d579fe96c103","message":"As many of you I find it a nightmare to install and configure WFB, because the wiki is very incomplete and is missing detailed informations.\nEspecially for a noobs like me :)\n\nSo I've begin to write a very detailed guide and want to share it with you.\nBut I'm still missing informations.\n\nPlease don't hesitate to correct it, and to add what is missing ...\n\nMany thanks for advance.\n\n**_Note : This guide isn't yet finished, and not yet perfect, because I can't make WFB work.\nSome things should be wrong or missing ..._**","files":null},{"type":6,"timestamp":1583778536,"nonce":"vzBpyl7mf0httaD1n5HLY6zB3tc=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDozNTg0MTUxNTE="},"target":"a73472d60c0f789f040792ba2f347ed42bfddf4085115668dae5d579fe96c103","message":"As many of you I find it a nightmare to install and configure WFB, because the wiki is very incomplete and is missing detailed informations.\nEspecially for a noobs like me :)\n\nSo I've begin to write a very detailed guide and want to share it with you.\nBut I'm still missing informations.\n\nPlease don't hesitate to correct it, and to add what is missing ...\n\nMany thanks for advance.\n\n**_Note : This guide isn't yet finished, and not yet perfect, because I don't have WFB working for now !!\nSome things should be wrong or missing ..._**","files":null},{"type":3,"timestamp":1583592724,"nonce":"yS2r8BBNIH8ZU4oi7b+fjSIE7jI=","metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjA5NjM1NQ==","github-url":"https://github.com/svpcom/wfb-ng/issues/53#issuecomment-596096355"},"message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet connected with your PC.\n\n- then connect to it via ssh\n\nssh pi@192.168.0.xx\npassword = raspberry\n\n- Next steps:\n\nsudo -s\n\n[Install libsodium]\n\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n\n[Install mavlink-router]\n\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n\n[Install gstreamer]\n\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n\n[Install some dependencies]\n\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n\n[Install wifibroadcast]\n\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n\n[Generate the keys for encryption]\n\nwfb_keygen\ncp *.key /etc\n\n[Create the wifibroadcast conf file]\n\ncd /etc\n\u003e wifibroadcast.cfg\n\nnano wifibroadcast\n\ncopy these lines into it :\n\n----------------------------------------------------------------------------------------------\n\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n# peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\nEdit this file and copy into it :\n\nnano /etc/mavlink-router/main.conf\n\n----------------------------------------------\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\nnano /etc/default/wifibroadcast\n\n(wlan0 should work if you have only one wifi board connected to the Pi, or you can use the MAC address of the boards)\n\n\n[Setup RTP video streaming on the drone to udp://127.0.0.1:5602]\n\nI don't know what to do here ... !!\n\n\n[setup a pipeline for gstreamer]\n\nI don't how and where to setup the pipeline (I have the pipeline ... !!\n\n\n[create the wifi access point for connecting QGC ?]\n\nI don't know were to configure it : board, band, SSID, pass ?\n\n[put the start sequences in .profile]\n\nnano /home/pi/.profile\n\nand add to it :\n\n--------------------------------------------\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# systemctl start wifibroadcast@drone\n--------------------------------------------","files":null},{"type":6,"timestamp":1583593156,"nonce":"JcnJdmez2fT7f2kRhdia8uoFcsA=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NDU3NzU3"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet connected with your PC.\n\n- then connect to it via ssh\n\nssh pi@192.168.0.xx\npassword = raspberry\n\n- Next steps:\n\nsudo -s\n\n[Install libsodium]\n\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n\n[Install mavlink-router]\n\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n\n[Install gstreamer]\n\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n\n[Install some dependencies]\n\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n\n[Install wifibroadcast]\n\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n\n[Generate the keys for encryption]\n\nwfb_keygen\ncp *.key /etc\n\n[Create the wifibroadcast conf file]\n\ncd /etc\n\u003e wifibroadcast.cfg\n\nnano wifibroadcast\n\ncopy these lines into it :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\nEdit this file and copy into it :\n\nnano /etc/mavlink-router/main.conf\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\nnano /etc/default/wifibroadcast\n\n(wlan0 should work if you have only one wifi board connected to the Pi, or you can use the MAC address of the boards)\n\n\n[Setup RTP video streaming on the drone to udp://127.0.0.1:5602]\n\n**I don't know what to do here ... !!**\n\n\n[setup a pipeline for gstreamer]\n\n**I don't how and where to setup the pipeline (I have the pipeline ... !!**\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\nnano /home/pi/.profile\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583593276,"nonce":"eqfl7A89Vp56cKJaP6meCCkyrhs=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NDU3ODc2"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet connected with your PC.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast\n`\ncopy these lines into it :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, or you can use the MAC address of the boards)\n\n\n[Setup RTP video streaming on the drone to udp://127.0.0.1:5602]\n\n**I don't know what to do here ... !!**\n\n\n[setup a pipeline for gstreamer]\n\n**I don't how and where to setup the pipeline (I have the pipeline ... !!**\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /home/pi/.profile`\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583608012,"nonce":"jWW0EnJJ4i/9I02MXp7AjxqZruI=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NDcxMDg1"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast\n`\ncopy these lines into it :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, or you can use the MAC address of the boards)\n\n\n[Setup RTP video streaming on the drone to udp://127.0.0.1:5602]\n\n**I don't know what to do here ... !!**\n\n\n[setup a pipeline for gstreamer]\n\n**I don't how and where to setup the pipeline (I have the pipeline ... !!**\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /home/pi/.profile`\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583667543,"nonce":"gHdgmbVj695FUJyUQNgBvZvFuYo=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NTE2MTU3"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast\n`\ncopy these lines into it :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, or you can use the MAC address of the boards)\n\n\n[Setup RTP video streaming on the drone to udp://127.0.0.1:5602]\n\n**I don't know what to do here ... !!**\n\n\n[setup a pipeline for gstreamer]\n\n**I don't how and where to setup the pipeline (I have the pipeline ... !!**\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /home/pi/.profile`\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# sudo systemctl start wifibroadcast@drone\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583667743,"nonce":"2sWnY2Ilc1QLZ8UdO7elEHH8+rs=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NTE2MzI0"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast\n`\ncopy these lines into it :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, or you can use the MAC address of the boards)\n\n\n[Setup RTP video streaming on the drone to udp://127.0.0.1:5602]\n\n**I don't know what to do here ... !!**\n\n\n[setup a pipeline for gstreamer]\n\n**I don't how and where to setup the pipeline (I have the pipeline ... !!**\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /home/pi/.profile`\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# mavlink-routerd \u0026\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602)\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583672861,"nonce":"i84HoSj49crpccJaT+LejBN7zRQ=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NTIwOTk0"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast\n`\ncopy these lines into it :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, or you can use the MAC address of the boards)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /home/pi/.profile`\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# mavlink-routerd \u0026\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583673201,"nonce":"BIKAaTDEC1fVaeeZmxedVSnF+AA=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NTIxMjkz"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, or you can use the MAC address of the boards)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /home/pi/.profile`\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# mavlink-routerd \u0026\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583677804,"nonce":"p/cdpAndnA46TaSTHT8gN97CEYc=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NTI2MDA3"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /home/pi/.profile`\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# mavlink-routerd \u0026\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583679740,"nonce":"3YZaV0UiZ9ViqxAzoScDFTcQAUA=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NTI3OTkw"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /home/pi/.profile`\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# mavlink-routerd \u0026\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583680827,"nonce":"gx0jW3y1brU/7D8G6jilxjcnum8=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NTI4OTUz"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /home/pi/.profile`\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583756758,"nonce":"vIL6wSRZJ+l15Y4gWDSQgi6Vsus=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NjY4OTQ3"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /home/pi/.profile`\n\nand add to it :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583760808,"nonce":"TlXuR5gnc0OT1SRNCLP7OIrDuZ4=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NjgyNjQ4"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl daemon-reload, systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583763125,"nonce":"cTj5BjUPON79bhqTUtvmydgxWDA=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NjkyMjkx"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583768409,"nonce":"S57euH1MVUmoCvhsUVVz9Wlkuf0=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NzE2NjAz"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n# systemctl start wifibroadcast@drone\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583775612,"nonce":"3PBQ7zTAnywvCzDZ8p3jE613Azc=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NzQ5ODky"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in .profile]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583778820,"nonce":"SYJmzh51dO8toOxIBohvrHznGFQ=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2NzYzMDc3"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------","files":null},{"type":6,"timestamp":1583851529,"nonce":"sCQXghV4oLUdHHiUvjc7tYeQRDE=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2OTk3NjU0"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/aircrack-ng/rtl8812au.git 5.2.20 branch) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------\n\n\nPS : Using this guide I'm able to build an unique image which can work on both drone and gs Pi which few modifications (see attached Howto)\n[HOWTO_SETUP.txt](https://github.com/svpcom/wifibroadcast/files/4313017/HOWTO_SETUP.txt)","files":null},{"type":6,"timestamp":1583870687,"nonce":"00gL+Wj0O2C1C/vWxpk0E4ayyBI=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU3MDgyMjY2"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\nNote : Image Builder was modified for compiling kernels with \"CONFIG_NET_SCHED=y\" and installing the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au).\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------\n\n\nPS : Using this guide I'm able to build an unique image which can work on both drone and gs Pi which few modifications (see attached Howto)\n[HOWTO_SETUP.txt](https://github.com/svpcom/wifibroadcast/files/4313017/HOWTO_SETUP.txt)","files":null},{"type":6,"timestamp":1583871667,"nonce":"8QOVxBjgiWyEVmIVDlSr2LRzD30=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU3MDg2MDI4"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\nNote : Image Builder was modified for compiling kernels with \"CONFIG_NET_SCHED=y\" and installing the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au).\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n\n[Install libsodium]\n\n```\ngit clone https://github.com/jedisct1/libsodium --branch stable\ncd libsodium\n./configure\nmake \u0026\u0026 make check\nsudo make install\ncd ..\nrm -rf libsodium\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------\n\n[give anybody the right to modify files to be modified]\n\n`sudo chmod 777 ...\n`\nPS : Using this guide I'm able to build an unique image which can work on both drone and gs Pi which few modifications (see attached Howto)\n[HOWTO_SETUP.txt](https://github.com/svpcom/wifibroadcast/files/4313017/HOWTO_SETUP.txt)","files":null},{"type":6,"timestamp":1583929890,"nonce":"C40wt3juJ5ktWVjtXJs+UxKYMOM=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU3MjUxODE3"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\nNote : Image Builder was modified for compiling kernels with \"CONFIG_NET_SCHED=y\" and installing the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au).\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n`apt-fet update`\n[Install libsodium]\n\n```\napt-get install libsodium18\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------\n\n[give anybody the right to modify files to be modified]\n\n`sudo chmod 777 ...\n`\nPS : Using this guide I'm able to build an unique image which can work on both drone and gs Pi which few modifications (see attached Howto)\n[HOWTO_SETUP.txt](https://github.com/svpcom/wifibroadcast/files/4313017/HOWTO_SETUP.txt)","files":null},{"type":6,"timestamp":1583931044,"nonce":"RPwy7QsiyJnkAuxgDu4WTqQxFjM=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU3MjU1NzIx"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\nNote : Image Builder was modified for compiling kernels with \"CONFIG_NET_SCHED=y\" and installing the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au).\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n`apt-fet update`\n[Install libsodium]\n\n```\napt-get install libsodium18\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------\n\n[give anybody the right to modify files to be modified]\n\n`chmod 777 /etc/wifibroadcast.cfg\nchmod 777 /etc/mavlink-router/main.conf\nchmod 777 /etc/default/wifibroadcast\nchmod 777 /etc/rc.local\n`\nPS : Using this guide I'm able to build an unique image which can work on both drone and gs Pi which few modifications (see attached Howto)\n[HOWTO_SETUP.txt](https://github.com/svpcom/wifibroadcast/files/4313017/HOWTO_SETUP.txt)","files":null},{"type":6,"timestamp":1583931074,"nonce":"HpjsAaGkT1R8S56CqKrVEMm7v50=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU3MjU1ODAy"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\nNote : Image Builder was modified for compiling kernels with \"CONFIG_NET_SCHED=y\" and installing the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au).\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n`apt-fet update`\n[Install libsodium]\n\n```\napt-get install libsodium18\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------\n\n[give anybody the right to modify files to be modified]\n\n```\nchmod 777 /etc/wifibroadcast.cfg\nchmod 777 /etc/mavlink-router/main.conf\nchmod 777 /etc/default/wifibroadcast\nchmod 777 /etc/rc.local\n```\n\nPS : Using this guide I'm able to build an unique image which can work on both drone and gs Pi which few modifications (see attached Howto)\n[HOWTO_SETUP.txt](https://github.com/svpcom/wifibroadcast/files/4313017/HOWTO_SETUP.txt)","files":null},{"type":6,"timestamp":1583937646,"nonce":"hZYuwAWvZ3nBCdFzHpga5HZskQM=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU3Mjg0Mjk5"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\nNote : Image Builder was modified for compiling kernels with \"CONFIG_NET_SCHED=y, CONFIG_NET_SCH_FIFO=y, CONFIG_PROC_CHILDREN=y\" and installing the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au).\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface and ssh.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n`apt-fet update`\n[Install libsodium]\n\n```\napt-get install libsodium18\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\npip install --upgrade pyroute2\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------\n\n[give anybody the right to modify files to be modified]\n\n```\nchmod 777 /etc/wifibroadcast.cfg\nchmod 777 /etc/mavlink-router/main.conf\nchmod 777 /etc/default/wifibroadcast\nchmod 777 /etc/rc.local\n```\n\nPS : Using this guide I'm able to build an unique image which can work on both drone and gs Pi which few modifications (see attached Howto)\n[HOWTO_SETUP.txt](https://github.com/svpcom/wifibroadcast/files/4313017/HOWTO_SETUP.txt)","files":null},{"type":6,"timestamp":1583951478,"nonce":"qX9XRlbNTHUykj3EYIpbR5uQoqo=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU3MzQ3NTI0"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\nNote : Image Builder was modified for compiling kernels with \"CONFIG_NET_SCHED=y, CONFIG_NET_SCH_FIFO=y, CONFIG_PROC_CHILDREN=y\" and installing the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au).\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface, ssh and serial port.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n`apt-fet update`\n[Install libsodium]\n\n```\napt-get install libsodium18\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\npip install --upgrade pyroute2\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------\n\n[give anybody the right to modify files to be modified]\n\n```\nchmod 777 /etc/wifibroadcast.cfg\nchmod 777 /etc/mavlink-router/main.conf\nchmod 777 /etc/default/wifibroadcast\nchmod 777 /etc/rc.local\n```\n\nPS : Using this guide I'm able to build an unique image which can work on both drone and gs Pi which few modifications (see attached Howto)\n[HOWTO_SETUP.txt](https://github.com/svpcom/wifibroadcast/files/4313017/HOWTO_SETUP.txt)","files":null},{"type":6,"timestamp":1583951502,"nonce":"frfzn9TEsXiKRML8Z6UROjsPe/E=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU3MzQ3NjEz"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\nNote : Image Builder was modified for compiling kernels with \"CONFIG_NET_SCHED=y, CONFIG_NET_SCH_FIFO=y, CONFIG_PROC_CHILDREN=y\" and installing the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au).\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface, ssh and serial port.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n`apt-get update`\n[Install libsodium]\n\n```\napt-get install libsodium18\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\npip install --upgrade pyroute2\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------\n\n[give anybody the right to modify files to be modified]\n\n```\nchmod 777 /etc/wifibroadcast.cfg\nchmod 777 /etc/mavlink-router/main.conf\nchmod 777 /etc/default/wifibroadcast\nchmod 777 /etc/rc.local\n```\n\nPS : Using this guide I'm able to build an unique image which can work on both drone and gs Pi which few modifications (see attached Howto)\n[HOWTO_SETUP.txt](https://github.com/svpcom/wifibroadcast/files/4313017/HOWTO_SETUP.txt)","files":null},{"type":6,"timestamp":1583951517,"nonce":"SX3qLoiXmg1Nu6TeR57ElBL4u40=","metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU3MzQ3NzAy"},"target":"9f34f0e7b901c24dab5c2b044c363b9bdb3d7a765f36a19f3f6f6d19bea51d23","message":"- Base image was created with Open.Hd Image Builder (https://github.com/OpenHD/Open.HD_Image_Builder) skiping the 4 and 5 stages to avoid installation of Open.HD. The resulting image has the needed kernel patches and the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au) installed.\nThis base image is working with all raspberry Pis except the RPI4 (support is coming soon)\n\nNote : Image Builder was modified for compiling kernels with \"CONFIG_NET_SCHED=y, CONFIG_NET_SCH_FIFO=y, CONFIG_PROC_CHILDREN=y\" and installing the patched aircrack-ng rtl8812au driver (https://github.com/svpcom/rtl8812au).\n\n- burn this image on a SD card and put it into a rapberry Pi ethernet or wifi connected with your PC.\n\n- connect a screen and a keyboard to the RPI, and use \"raspi-config\" to enable the camera interface, ssh and serial port.\n\n- then connect to it via ssh\n\n`ssh pi@192.168.0.xx`\npassword = raspberry\n\n- Next steps:\n\n`sudo -s`\n`apt-get update`\n\n[Install libsodium]\n\n```\napt-get install libsodium18\n```\n\n[Install mavlink-router]\n\n```\ngit clone https://github.com/intel/mavlink-router\ncd mavlink-router/\ngit submodule update --init --recursive\n./autogen.sh \u0026\u0026 ./configure CFLAGS='-g -O2' \\\n        --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64 \\\n    --prefix=/usr\nmake\nmake install\ncd ..\nrm -rf mavlink-router\n```\n\n[Install gstreamer]\n\n```\nwget https://github.com/OpenHD/gst-raspberrypi/releases/download/1.10.4-stretch/GStreamer-1.10.4-stretch.tar.gz\ntar xvf GStreamer-1.10.4-stretch.tar.gz\ndpkg -i GStreamer-1.10.4-stretch/*.deb\nrm GStreamer-1.10.4-stretch.tar.gz\nrm -rf GStreamer-1.10.4-stretch\n```\n\n[Install some dependencies]\n\n```\napt-get install python3-virtualenv virtualenv\napt-get install python-twisted libpcap-dev libsodium-dev python-pyroute2 python-future python-configparser python-all\npip install --upgrade pyroute2\nsudo apt install gstreamer1.0-libav\n```\n\n[Install wifibroadcast]\n\n```\ncd ~\ngit clone https://github.com/svpcom/wifibroadcast.git\ncd wifibroadcast\nmake deb\ncd deb_dist\ndpkg -i wifibroadcast*.deb\n```\n\n[Generate the keys for encryption]\n\n```\nwfb_keygen\ncp *.key /etc\n```\n\n[Create the wifibroadcast conf file]\n\n```\ncd /etc\n\u003e wifibroadcast.cfg\n```\n\n`nano wifibroadcast.cfg\n`\ncopy these lines into it and adapt the values for your needs :\n\n----------------------------------------------------------------------------------------------\n\n```\n[common]\nwifi_channel = 161     # 161 -- radio channel @5805 MHz, range: 5795–5815 MHz, width 20MHz\n                       # 1 -- radio channel @2412 Mhz, \n                       # see https://en.wikipedia.org/wiki/List_of_WLAN_channels for reference\nwifi_region = 'BO'     # Your country for CRDA (use BO or GY if you want max tx power) \n\n\n[gs_mavlink]\npeer = 'connect://127.0.0.1:14550'  # outgoing connection\n # peer = 'listen://0.0.0.0:14550'   # incoming connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[gs_video]\npeer = 'connect://127.0.0.1:5600'  # outgoing connection for\n                                   # video sink (QGroundControl on GS)\n                                   \nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_mavlink]\npeer = 'listen://0.0.0.0:14550'   # incoming connection\n# peer = 'connect://127.0.0.1:14550'  # outgoing connection\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n[drone_video]\npeer = 'listen://0.0.0.0:5602'  # listen for video stream (gstreamer on drone)\n\nbandwidth = 20     # bandwidth 20 or 40 MHz\nshort_gi = False   # use short GI or not\nstbc = 1           # stbc streams: 1, 2, 3 or 0 if unused\nmcs_index = 1      # mcs index\n\n```\n\n----------------------------------------------------------------------------------------------\n\n\n[Create a conf file for mavlink-router]\n\n```\nmkdir /etc/mavlink-router\n\u003e /etc/mavlink-router/main.conf\n\n```\nEdit this file and copy into it :\n\n`nano /etc/mavlink-router/main.conf`\n\n----------------------------------------------\n```\n[UdpEndpoint wifibroadcast]\nMode = Normal\nAddress = 127.0.0.1\nPort = 14550\n\n[UartEndpoint ardupilot]\nDevice = /dev/serial0\nBaud = 57600\n\n```\n----------------------------------------------\n\n[Set the right interface in /etc/default/wifibroadcast]\n\nEdit /etc/default/wifibroadcast and repace wlan0 with proper wifi interface name :\n\n`nano /etc/default/wifibroadcast`\n\n(wlan0 should work if you have only one wifi board connected to the Pi, but it's better to use the MAC address of the boards because they never change.)\n\n\n[create the wifi access point for connecting QGC ?]\n\n**I don't know were to configure it : board, band, SSID, pass ?**\n\n[put the start sequences in  /etc/rc.local]\n\n`nano /etc/rc.local`\n\nand add to it (before \"exit 0) :\n\n--------------------------------------------\n```\n# uncomment for gs\n# sudo systemctl start wifibroadcast@gs\n\n# uncomment for drone\n# sudo systemctl start wifibroadcast@drone\n# mavlink-routerd \u0026\n# for RPI cam\n# (raspivid --nopreview --awb auto -ih -t 0 -w 640 -h 360 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# or\n# (raspivid --nopreview --awb auto -ih -t 0 -w 1280 -h 720 -fps 49 -b 4000000 -g 147 -pf high -o - | gst-launch-1.0 fdsrc ! h264parse !  rtph264pay !  udpsink host=127.0.0.1 port=5602 \u0026)\n# for Logitech camera C920 camera\n# gst-launch-1.0 uvch264src device=/dev/video0 initial-bitrate=4000000 average-bitrate=4000000 iframe-period=3000 name=src auto-start=true \\  src.vidsrc ! queue ! video/x-h264,width=1280,height=720,framerate=30/1 ! h264parse ! rtph264pay ! udpsink host=localhost port=5602\n```\n--------------------------------------------\n\n[give anybody the right to modify files to be modified]\n\n```\nchmod 777 /etc/wifibroadcast.cfg\nchmod 777 /etc/mavlink-router/main.conf\nchmod 777 /etc/default/wifibroadcast\nchmod 777 /etc/rc.local\n```\n\nPS : Using this guide I'm able to build an unique image which can work on both drone and gs Pi which few modifications (see attached Howto)\n[HOWTO_SETUP.txt](https://github.com/svpcom/wifibroadcast/files/4313017/HOWTO_SETUP.txt)","files":null}]}